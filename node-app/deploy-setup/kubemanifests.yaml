---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml -o kubemanifests.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  ports:
    - name: "3306"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: mysql
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml -o kubemanifests.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nodejs-login
  name: nodejs-login
spec:
  ports:
    - name: "3000"
      port: 3000
      targetPort: 3000
  selector:
    io.kompose.service: nodejs-login
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml -o kubemanifests.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yaml -o kubemanifests.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/node-login-microservice-default: "true"
        io.kompose.service: mysql
    spec:
      containers:
        - env:
            - name: MYSQL_PASSWORD
              value: password
            - name: MYSQL_ROOT_PASSWORD
              value: root
            - name: MYSQL_USER
              value: aniket
          image: mysql:8.0
          name: mysqlcontainer
          ports:
            - containerPort: 3306
          resources: {}
          volumeMounts:
            - mountPath: /docker-entrypoint-initdb.d
              name: mysql-claim0
            - mountPath: /var/lib/mysql
              name: mysql-claim1
      hostname: mysqlcontainer
      restartPolicy: Always
      volumes:
        - name: mysql-claim0
          persistentVolumeClaim:
            claimName: mysql-claim0
        - name: mysql-claim1
          persistentVolumeClaim:
            claimName: mysql-claim1
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mysql-claim0
  name: mysql-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mysql-claim1
  name: mysql-claim1
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: node-login-microservice-default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/node-login-microservice-default: "true"
  podSelector:
    matchLabels:
      io.kompose.network/node-login-microservice-default: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f docker-compose.yaml -o kubemanifests.yaml
    kompose.version: 1.28.0 (HEAD)
  creationTimestamp: null
  labels:
    io.kompose.service: nodejs-login
  name: nodejs-login
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nodejs-login
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.yaml -o kubemanifests.yaml
        kompose.version: 1.28.0 (HEAD)
      creationTimestamp: null
      labels:
        io.kompose.network/node-login-microservice-default: "true"
        io.kompose.service: nodejs-login
    spec:
      containers:
        - env:
            - name: DATABASE_URL
              value: mysql://aniket:password@mysql:3306/userdb
            - name: NODE_ENV
              value: development
            - name: PORT
              value: "3000"
          image: anikep/node_login_microservice:1.0.0
          name: nodejs-login
          ports:
            - containerPort: 3000
          resources: {}
      restartPolicy: Always
status: {}

