---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: flask-mongodb-microservice
  name: flask-mongodb-microservice
spec:
  ports:
    - name: "4000"
      port: 4000
      targetPort: 4000
  selector:
    io.kompose.service: flask-mongodb-microservice
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: mongodb
  name: test-mongodb
spec:
  ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
  selector:
    io.kompose.service: mongodb
status:
  loadBalancer: {}

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: redis
  name: rediscli
spec:
  ports:
    - name: "6379"
      port: 6379
      targetPort: 6379
  selector:
    io.kompose.service: redis
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: flask-mongodb-microservice
  name: flask-mongodb-microservice
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: flask-mongodb-microservice
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/src-default: "true"
        io.kompose.service: flask-mongodb-microservice
    spec:
      containers:
        - image: anikep/flask_photos_microservice:1.0.0
          imagePullPolicy: Always
          name: flask-mongodb-microservice

          ports:
            - containerPort: 4000
          resources: {}
          # volumeMounts:
          #   - mountPath: /app
          #     name: flask-mongodb-microservice-claim0
      restartPolicy: Always
      # volumes:
      #   - name: flask-mongodb-microservice-claim0
      #     persistentVolumeClaim:
      #       claimName: flask-mongodb-microservice-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: flask-mongodb-microservice-claim0
  name: flask-mongodb-microservice-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  creationTimestamp: null
  name: src-default
spec:
  ingress:
    - from:
        - podSelector:
            matchLabels:
              io.kompose.network/src-default: "true"
  podSelector:
    matchLabels:
      io.kompose.network/src-default: "true"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.network/src-default: "true"
        io.kompose.service: mongodb
    spec:
      containers:
        - args:
            - mongod
            - --port
            - "27017"
          env:
            - name: MONGO_INITDB_DATABASE
              value: photosdb
            - name: MONGO_INITDB_ROOT_PASSWORD
              value: password
            - name: MONGO_INITDB_ROOT_USERNAME
              value: root
          image: mongo:latest
          name: mongodb
          ports:
            - containerPort: 27017
          resources: {}
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-claim0
      hostname: test-mongodb
      restartPolicy: Always
      volumes:
        - name: mongodb-claim0
          persistentVolumeClaim:
            claimName: mongodb-claim0
status: {}

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb-claim0
  name: mongodb-claim0
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy: {}
  template:
    metadata:
      labels:
        io.kompose.network/src-default: "true"
        io.kompose.service: redis
    spec:
      containers:
        - image: redis
          name: rediscli
          ports:
            - containerPort: 6379
          resources: {}
      restartPolicy: Always
status: {}

